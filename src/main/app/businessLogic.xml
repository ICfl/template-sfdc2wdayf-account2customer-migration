<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:wd-revenue="http://www.mulesoft.org/schema/mule/wd-revenue"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/wd-revenue http://www.mulesoft.org/schema/mule/wd-revenue/current/mule-wd-revenue.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<data-mapper:config name="Map_To_Pojo"
		transformationGraphPath="map_to_pojo.grf" doc:name="Map_To_Pojo" />

	<batch:job name="migrateAccountsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
            <sfdc:query config-ref="Salesforce" query="dsql:SELECT Id,Industry,Name,Website,BillingAddress,Phone FROM Account WHERE NumberOfEmployees &gt; 50000" fetchSize="${page.size}" doc:name="query Accounts from Salesforce"/>

		</batch:input>
		<batch:process-records>
			<batch:step name="getCustomerInWorkdayStep">
				<enricher doc:name="store in recordVar 'wdayfCustomer'"
					source="#[payload]" target="#[recordVars['wdayfCustomer']]">
					<processor-chain doc:name="Get existing">
						<wd-revenue:get-customers config-ref="Workday_Revenue_Management"
							doc:name="Get Customer by ID"
							getCustomersRequest-ref="#[org.mule.templates.CustomerRequest.createByID(payload[&quot;Id&quot;])]" />
					</processor-chain>
				</enricher>
			</batch:step>
			<batch:step name="upsertWorkdayCustomer">
                <logger message="Upserting Customer with ID:  #[payload.Id], Name: #[payload.Name]" level="INFO" doc:name="Log Upsert"/>
				<data-mapper:transform config-ref="Map_To_Pojo"
					doc:name="Map To PutCustomersRequestType" >
                    <data-mapper:input-arguments>
                        <data-mapper:input-argument key="phone">${wdayf.phone}</data-mapper:input-argument>
                        <data-mapper:input-argument key="country">${wdayf.country}</data-mapper:input-argument>
                        <data-mapper:input-argument key="street">${wdayf.street}</data-mapper:input-argument>
                        <data-mapper:input-argument key="state">${wdayf.state}</data-mapper:input-argument>
                        <data-mapper:input-argument key="city">${wdayf.city}</data-mapper:input-argument>
                        <data-mapper:input-argument key="postalCode">${wdayf.postalCode}</data-mapper:input-argument>
                    </data-mapper:input-arguments>
                </data-mapper:transform>
				<expression-component
					doc:name="Add customer reference object if it already exists"><![CDATA[// if customer is already in Workday system, add customer reference object to payload to indicate update operation
if( recordVars['wdayfCustomer'].responseResults.totalResults == 1 ) {
	payload.customerReference = recordVars['wdayfCustomer'].responseData[0].customer[0].customerReference
}
]]></expression-component>
				<wd-revenue:put-customer config-ref="Workday_Revenue_Management"
					doc:name="Upsert Customer" />
			</batch:step>

		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
					<parse-template location="./src/main/resources/email/body.html"
						doc:name="Parse Template" />
					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}"
						subject="${mail.subject}" responseTimeout="10000" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>

	<flow name="mainFlow" processingStrategy="synchronous"
		doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
		<batch:execute name="migrateAccountsBatch" doc:name="run migrateAccountsBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Reference Exception Strategy" />

	</flow>



</mule>
